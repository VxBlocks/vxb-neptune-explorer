// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.

//lint:file-ignore ST1005 this is generated code

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Defines values for GetTrendFeeParamsDuration.
const (
	GetTrendFeeParamsDurationAll   GetTrendFeeParamsDuration = "all"
	GetTrendFeeParamsDurationDay   GetTrendFeeParamsDuration = "day"
	GetTrendFeeParamsDurationMonth GetTrendFeeParamsDuration = "month"
	GetTrendFeeParamsDurationWeek  GetTrendFeeParamsDuration = "week"
)

// Defines values for GetTrendRewardParamsDuration.
const (
	GetTrendRewardParamsDurationAll   GetTrendRewardParamsDuration = "all"
	GetTrendRewardParamsDurationDay   GetTrendRewardParamsDuration = "day"
	GetTrendRewardParamsDurationMonth GetTrendRewardParamsDuration = "month"
	GetTrendRewardParamsDurationWeek  GetTrendRewardParamsDuration = "week"
)

// Defines values for GetTrendTargetParamsDuration.
const (
	All   GetTrendTargetParamsDuration = "all"
	Day   GetTrendTargetParamsDuration = "day"
	Month GetTrendTargetParamsDuration = "month"
	Week  GetTrendTargetParamsDuration = "week"
)

// UtxoDigest defines model for UtxoDigest.
type UtxoDigest struct {
	Digest string `json:"digest"`
	Id     int64  `json:"id"`
}

// Blockcommon defines model for blockcommon.
type Blockcommon struct {
	Block               int64     `json:"block"`
	BlockCoinbaseReward string    `json:"block_coinbase_reward"`
	BlockGas            string    `json:"block_gas"`
	BlockHash           string    `json:"block_hash"`
	IsCanonical         bool      `json:"is_canonical"`
	Target              string    `json:"target"`
	Time                time.Time `json:"time"`
}

// Blockitem defines model for blockitem.
type Blockitem struct {
	Block          int64     `json:"block"`
	BlockHash      string    `json:"block_hash"`
	CoinbaseReward string    `json:"coinbase_reward"`
	Fee            string    `json:"fee"`
	Inputs         int       `json:"inputs"`
	Outputs        int       `json:"outputs"`
	ProofTarget    string    `json:"proof_target"`
	Time           time.Time `json:"time"`
}

// ChartPoint defines model for chart.Point.
type ChartPoint struct {
	Height *int64    `json:"height,omitempty"`
	Interv time.Time `json:"interv"`
	Value  float64   `json:"value"`
}

// ChartRewardPoint defines model for chart.RewardPoint.
type ChartRewardPoint struct {
	Fee    float64   `json:"fee"`
	Height *int64    `json:"height,omitempty"`
	Interv time.Time `json:"interv"`
	Value  float64   `json:"value"`
}

// Overview defines model for overview.
type Overview struct {
	AverageBlockTime      float32 `json:"average_block_time"`
	BlockHash             string  `json:"block_hash"`
	CumulativeProofOfWork string  `json:"cumulative_proof_of_work"`
	DayFee                string  `json:"day_fee"`
	DayReward             string  `json:"day_reward"`
	Height                int64   `json:"height"`
	NetworkSpeed24h       string  `json:"network_speed_24h"`
	ProofTarget           string  `json:"proof_target"`
	Timestamp             string  `json:"timestamp"`
	TotalFee              string  `json:"total_fee"`
	TotalReward           string  `json:"total_reward"`
	TxCount               int64   `json:"tx_count"`
	UtxoCount             int64   `json:"utxo_count"`
}

// Transaction defines model for transaction.
type Transaction struct {
	Fee        string    `json:"fee"`
	Height     int64     `json:"height"`
	Id         string    `json:"id"`
	Inputs     []string  `json:"inputs"`
	NumInputs  int       `json:"num_inputs"`
	NumOutputs int       `json:"num_outputs"`
	Outputs    []string  `json:"outputs"`
	ProofType  string    `json:"proof_type"`
	Time       time.Time `json:"time"`
}

// TransactionListItem defines model for transactionListItem.
type TransactionListItem struct {
	Fee        string    `json:"fee"`
	Height     int64     `json:"height"`
	Id         string    `json:"id"`
	NumInputs  int       `json:"num_inputs"`
	NumOutputs int       `json:"num_outputs"`
	ProofType  string    `json:"proof_type"`
	Time       time.Time `json:"time"`
}

// Txo defines model for txo.
type Txo struct {
	Height int64 `json:"height"`

	// Id ID
	Id   string `json:"id"`
	Txid string `json:"txid"`
}

// GetBlocksParams defines parameters for GetBlocks.
type GetBlocksParams struct {
	Page     int `form:"page" json:"page"`
	PageSize int `form:"page_size" json:"page_size"`
}

// GetForksParams defines parameters for GetForks.
type GetForksParams struct {
	Page     int `form:"page" json:"page"`
	PageSize int `form:"page_size" json:"page_size"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// GetTrendFeeParams defines parameters for GetTrendFee.
type GetTrendFeeParams struct {
	Duration GetTrendFeeParamsDuration `form:"duration" json:"duration"`
}

// GetTrendFeeParamsDuration defines parameters for GetTrendFee.
type GetTrendFeeParamsDuration string

// GetTrendRewardParams defines parameters for GetTrendReward.
type GetTrendRewardParams struct {
	Duration GetTrendRewardParamsDuration `form:"duration" json:"duration"`
}

// GetTrendRewardParamsDuration defines parameters for GetTrendReward.
type GetTrendRewardParamsDuration string

// GetTrendTargetParams defines parameters for GetTrendTarget.
type GetTrendTargetParams struct {
	Duration GetTrendTargetParamsDuration `form:"duration" json:"duration"`
}

// GetTrendTargetParamsDuration defines parameters for GetTrendTarget.
type GetTrendTargetParamsDuration string

// GetTxListParams defines parameters for GetTxList.
type GetTxListParams struct {
	Page     int `form:"page" json:"page"`
	PageSize int `form:"pageSize" json:"pageSize"`
}

// GetUtxoListParams defines parameters for GetUtxoList.
type GetUtxoListParams struct {
	Page     int `form:"page" json:"page"`
	PageSize int `form:"pageSize" json:"pageSize"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// WatchBlock
	// (GET /block/event)
	GetBlockEvent(c *gin.Context)
	// WatchMempool
	// (GET /block/mempool)
	GetBlockMempool(c *gin.Context)
	// Block Detail
	// (GET /block/{height})
	GetBlockHeight(c *gin.Context, height int64)
	// Blocks
	// (GET /blocks)
	GetBlocks(c *gin.Context, params GetBlocksParams)
	// Forks
	// (GET /forks)
	GetForks(c *gin.Context, params GetForksParams)
	// Network Overview
	// (GET /overview)
	GetOverview(c *gin.Context)
	// rpc.getBlock
	// (GET /rpc/block/{height_or_hash})
	GetRpcBlockHeightOrHash(c *gin.Context, heightOrHash string)
	// rpcGetPuzzle
	// (GET /rpc/pow_puzzle)
	GetRpcPowPuzzle(c *gin.Context)
	// search
	// (GET /search)
	GetSearch(c *gin.Context, params GetSearchParams)
	// swagger.json
	// (GET /swagger.json)
	GetSwaggerJson(c *gin.Context)
	// transactionsByheight
	// (GET /transaction/by_height/{height})
	GetTransactionByHeightHeight(c *gin.Context, height int64)
	// NetworkFeeRewardTrend
	// (GET /trend/fee)
	GetTrendFee(c *gin.Context, params GetTrendFeeParams)
	// NetworkRewardTrend
	// (GET /trend/reward)
	GetTrendReward(c *gin.Context, params GetTrendRewardParams)
	// NetworkTargetTrend
	// (GET /trend/target)
	GetTrendTarget(c *gin.Context, params GetTrendTargetParams)
	// transactions
	// (GET /tx/list)
	GetTxList(c *gin.Context, params GetTxListParams)
	// getTransaction
	// (GET /tx/{txid})
	GetTxTxid(c *gin.Context, txid string)
	// utxolist
	// (GET /utxo/list)
	GetUtxoList(c *gin.Context, params GetUtxoListParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBlockEvent operation middleware
func (siw *ServerInterfaceWrapper) GetBlockEvent(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBlockEvent(c)
}

// GetBlockMempool operation middleware
func (siw *ServerInterfaceWrapper) GetBlockMempool(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBlockMempool(c)
}

// GetBlockHeight operation middleware
func (siw *ServerInterfaceWrapper) GetBlockHeight(c *gin.Context) {

	var err error

	// ------------- Path parameter "height" -------------
	var height int64

	err = runtime.BindStyledParameterWithOptions("simple", "height", c.Param("height"), &height, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter height: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBlockHeight(c, height)
}

// GetBlocks operation middleware
func (siw *ServerInterfaceWrapper) GetBlocks(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlocksParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_size" -------------

	if paramValue := c.Query("page_size"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_size is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBlocks(c, params)
}

// GetForks operation middleware
func (siw *ServerInterfaceWrapper) GetForks(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetForksParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "page_size" -------------

	if paramValue := c.Query("page_size"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page_size is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetForks(c, params)
}

// GetOverview operation middleware
func (siw *ServerInterfaceWrapper) GetOverview(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOverview(c)
}

// GetRpcBlockHeightOrHash operation middleware
func (siw *ServerInterfaceWrapper) GetRpcBlockHeightOrHash(c *gin.Context) {

	var err error

	// ------------- Path parameter "height_or_hash" -------------
	var heightOrHash string

	err = runtime.BindStyledParameterWithOptions("simple", "height_or_hash", c.Param("height_or_hash"), &heightOrHash, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter height_or_hash: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRpcBlockHeightOrHash(c, heightOrHash)
}

// GetRpcPowPuzzle operation middleware
func (siw *ServerInterfaceWrapper) GetRpcPowPuzzle(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRpcPowPuzzle(c)
}

// GetSearch operation middleware
func (siw *ServerInterfaceWrapper) GetSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSearch(c, params)
}

// GetSwaggerJson operation middleware
func (siw *ServerInterfaceWrapper) GetSwaggerJson(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSwaggerJson(c)
}

// GetTransactionByHeightHeight operation middleware
func (siw *ServerInterfaceWrapper) GetTransactionByHeightHeight(c *gin.Context) {

	var err error

	// ------------- Path parameter "height" -------------
	var height int64

	err = runtime.BindStyledParameterWithOptions("simple", "height", c.Param("height"), &height, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter height: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTransactionByHeightHeight(c, height)
}

// GetTrendFee operation middleware
func (siw *ServerInterfaceWrapper) GetTrendFee(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrendFeeParams

	// ------------- Required query parameter "duration" -------------

	if paramValue := c.Query("duration"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument duration is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "duration", c.Request.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter duration: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrendFee(c, params)
}

// GetTrendReward operation middleware
func (siw *ServerInterfaceWrapper) GetTrendReward(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrendRewardParams

	// ------------- Required query parameter "duration" -------------

	if paramValue := c.Query("duration"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument duration is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "duration", c.Request.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter duration: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrendReward(c, params)
}

// GetTrendTarget operation middleware
func (siw *ServerInterfaceWrapper) GetTrendTarget(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTrendTargetParams

	// ------------- Required query parameter "duration" -------------

	if paramValue := c.Query("duration"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument duration is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "duration", c.Request.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter duration: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTrendTarget(c, params)
}

// GetTxList operation middleware
func (siw *ServerInterfaceWrapper) GetTxList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTxListParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument pageSize is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTxList(c, params)
}

// GetTxTxid operation middleware
func (siw *ServerInterfaceWrapper) GetTxTxid(c *gin.Context) {

	var err error

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithOptions("simple", "txid", c.Param("txid"), &txid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter txid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTxTxid(c, txid)
}

// GetUtxoList operation middleware
func (siw *ServerInterfaceWrapper) GetUtxoList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUtxoListParams

	// ------------- Required query parameter "page" -------------

	if paramValue := c.Query("page"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument page is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "pageSize" -------------

	if paramValue := c.Query("pageSize"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument pageSize is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "pageSize", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageSize: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUtxoList(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/block/event", wrapper.GetBlockEvent)
	router.GET(options.BaseURL+"/block/mempool", wrapper.GetBlockMempool)
	router.GET(options.BaseURL+"/block/:height", wrapper.GetBlockHeight)
	router.GET(options.BaseURL+"/blocks", wrapper.GetBlocks)
	router.GET(options.BaseURL+"/forks", wrapper.GetForks)
	router.GET(options.BaseURL+"/overview", wrapper.GetOverview)
	router.GET(options.BaseURL+"/rpc/block/:height_or_hash", wrapper.GetRpcBlockHeightOrHash)
	router.GET(options.BaseURL+"/rpc/pow_puzzle", wrapper.GetRpcPowPuzzle)
	router.GET(options.BaseURL+"/search", wrapper.GetSearch)
	router.GET(options.BaseURL+"/swagger.json", wrapper.GetSwaggerJson)
	router.GET(options.BaseURL+"/transaction/by_height/:height", wrapper.GetTransactionByHeightHeight)
	router.GET(options.BaseURL+"/trend/fee", wrapper.GetTrendFee)
	router.GET(options.BaseURL+"/trend/reward", wrapper.GetTrendReward)
	router.GET(options.BaseURL+"/trend/target", wrapper.GetTrendTarget)
	router.GET(options.BaseURL+"/tx/list", wrapper.GetTxList)
	router.GET(options.BaseURL+"/tx/:txid", wrapper.GetTxTxid)
	router.GET(options.BaseURL+"/utxo/list", wrapper.GetUtxoList)
}

type GetBlockEventRequestObject struct {
}

type GetBlockEventResponseObject interface {
	VisitGetBlockEventResponse(w http.ResponseWriter) error
}

type GetBlockEvent200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetBlockEvent200TexteventStreamResponse) VisitGetBlockEventResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetBlockMempoolRequestObject struct {
}

type GetBlockMempoolResponseObject interface {
	VisitGetBlockMempoolResponse(w http.ResponseWriter) error
}

type GetBlockMempool200TexteventStreamResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetBlockMempool200TexteventStreamResponse) VisitGetBlockMempoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetBlockHeightRequestObject struct {
	Height int64 `json:"height"`
}

type GetBlockHeightResponseObject interface {
	VisitGetBlockHeightResponse(w http.ResponseWriter) error
}

type GetBlockHeight200JSONResponse struct {
	Detail  Blockcommon `json:"detail"`
	Message string      `json:"message"`
	Success bool        `json:"success"`
}

func (response GetBlockHeight200JSONResponse) VisitGetBlockHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBlocksRequestObject struct {
	Params GetBlocksParams
}

type GetBlocksResponseObject interface {
	VisitGetBlocksResponse(w http.ResponseWriter) error
}

type GetBlocks200JSONResponse struct {
	Blocks  []Blockitem `json:"blocks"`
	Count   int64       `json:"count"`
	Message string      `json:"message"`
	Success bool        `json:"success"`
}

func (response GetBlocks200JSONResponse) VisitGetBlocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetForksRequestObject struct {
	Params GetForksParams
}

type GetForksResponseObject interface {
	VisitGetForksResponse(w http.ResponseWriter) error
}

type GetForks200JSONResponse struct {
	Blocks  []Blockitem `json:"blocks"`
	Count   int64       `json:"count"`
	Message string      `json:"message"`
	Success bool        `json:"success"`
}

func (response GetForks200JSONResponse) VisitGetForksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOverviewRequestObject struct {
}

type GetOverviewResponseObject interface {
	VisitGetOverviewResponse(w http.ResponseWriter) error
}

type GetOverview200JSONResponse struct {
	Message  string   `json:"message"`
	Overview Overview `json:"overview"`
	Success  bool     `json:"success"`
}

func (response GetOverview200JSONResponse) VisitGetOverviewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRpcBlockHeightOrHashRequestObject struct {
	HeightOrHash string `json:"height_or_hash"`
}

type GetRpcBlockHeightOrHashResponseObject interface {
	VisitGetRpcBlockHeightOrHashResponse(w http.ResponseWriter) error
}

type GetRpcBlockHeightOrHash200JSONResponse map[string]interface{}

func (response GetRpcBlockHeightOrHash200JSONResponse) VisitGetRpcBlockHeightOrHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRpcPowPuzzleRequestObject struct {
}

type GetRpcPowPuzzleResponseObject interface {
	VisitGetRpcPowPuzzleResponse(w http.ResponseWriter) error
}

type GetRpcPowPuzzle200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response GetRpcPowPuzzle200AsteriskResponse) VisitGetRpcPowPuzzleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetSearchRequestObject struct {
	Params GetSearchParams
}

type GetSearchResponseObject interface {
	VisitGetSearchResponse(w http.ResponseWriter) error
}

type GetSearch200JSONResponse struct {
	Block       *Blockitem           `json:"block,omitempty"`
	Input       *Txo                 `json:"input,omitempty"`
	Output      *Txo                 `json:"output,omitempty"`
	Transaction *TransactionListItem `json:"transaction,omitempty"`
}

func (response GetSearch200JSONResponse) VisitGetSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSwaggerJsonRequestObject struct {
}

type GetSwaggerJsonResponseObject interface {
	VisitGetSwaggerJsonResponse(w http.ResponseWriter) error
}

type GetSwaggerJson200AsteriskResponse struct {
	Body          io.Reader
	ContentType   string
	ContentLength int64
}

func (response GetSwaggerJson200AsteriskResponse) VisitGetSwaggerJsonResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetTransactionByHeightHeightRequestObject struct {
	Height int64 `json:"height"`
}

type GetTransactionByHeightHeightResponseObject interface {
	VisitGetTransactionByHeightHeightResponse(w http.ResponseWriter) error
}

type GetTransactionByHeightHeight200JSONResponse struct {
	Success bool                  `json:"success"`
	Txs     []TransactionListItem `json:"txs"`
}

func (response GetTransactionByHeightHeight200JSONResponse) VisitGetTransactionByHeightHeightResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrendFeeRequestObject struct {
	Params GetTrendFeeParams
}

type GetTrendFeeResponseObject interface {
	VisitGetTrendFeeResponse(w http.ResponseWriter) error
}

type GetTrendFee200JSONResponse struct {
	Chart   []ChartPoint `json:"chart"`
	Success bool         `json:"success"`
}

func (response GetTrendFee200JSONResponse) VisitGetTrendFeeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrendRewardRequestObject struct {
	Params GetTrendRewardParams
}

type GetTrendRewardResponseObject interface {
	VisitGetTrendRewardResponse(w http.ResponseWriter) error
}

type GetTrendReward200JSONResponse struct {
	Chart   []ChartRewardPoint `json:"chart"`
	Success bool               `json:"success"`
}

func (response GetTrendReward200JSONResponse) VisitGetTrendRewardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTrendTargetRequestObject struct {
	Params GetTrendTargetParams
}

type GetTrendTargetResponseObject interface {
	VisitGetTrendTargetResponse(w http.ResponseWriter) error
}

type GetTrendTarget200JSONResponse struct {
	Chart   []ChartPoint `json:"chart"`
	Success bool         `json:"success"`
}

func (response GetTrendTarget200JSONResponse) VisitGetTrendTargetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTxListRequestObject struct {
	Params GetTxListParams
}

type GetTxListResponseObject interface {
	VisitGetTxListResponse(w http.ResponseWriter) error
}

type GetTxList200JSONResponse struct {
	Count   int64                 `json:"count"`
	Success bool                  `json:"success"`
	Txs     []TransactionListItem `json:"txs"`
}

func (response GetTxList200JSONResponse) VisitGetTxListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTxTxidRequestObject struct {
	Txid string `json:"txid"`
}

type GetTxTxidResponseObject interface {
	VisitGetTxTxidResponse(w http.ResponseWriter) error
}

type GetTxTxid200JSONResponse struct {
	Success bool        `json:"success"`
	Tx      Transaction `json:"tx"`
}

func (response GetTxTxid200JSONResponse) VisitGetTxTxidResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUtxoListRequestObject struct {
	Params GetUtxoListParams
}

type GetUtxoListResponseObject interface {
	VisitGetUtxoListResponse(w http.ResponseWriter) error
}

type GetUtxoList200JSONResponse struct {
	Count   int64        `json:"count"`
	Success bool         `json:"success"`
	Utxos   []UtxoDigest `json:"utxos"`
}

func (response GetUtxoList200JSONResponse) VisitGetUtxoListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// WatchBlock
	// (GET /block/event)
	GetBlockEvent(ctx context.Context, request GetBlockEventRequestObject) (GetBlockEventResponseObject, error)
	// WatchMempool
	// (GET /block/mempool)
	GetBlockMempool(ctx context.Context, request GetBlockMempoolRequestObject) (GetBlockMempoolResponseObject, error)
	// Block Detail
	// (GET /block/{height})
	GetBlockHeight(ctx context.Context, request GetBlockHeightRequestObject) (GetBlockHeightResponseObject, error)
	// Blocks
	// (GET /blocks)
	GetBlocks(ctx context.Context, request GetBlocksRequestObject) (GetBlocksResponseObject, error)
	// Forks
	// (GET /forks)
	GetForks(ctx context.Context, request GetForksRequestObject) (GetForksResponseObject, error)
	// Network Overview
	// (GET /overview)
	GetOverview(ctx context.Context, request GetOverviewRequestObject) (GetOverviewResponseObject, error)
	// rpc.getBlock
	// (GET /rpc/block/{height_or_hash})
	GetRpcBlockHeightOrHash(ctx context.Context, request GetRpcBlockHeightOrHashRequestObject) (GetRpcBlockHeightOrHashResponseObject, error)
	// rpcGetPuzzle
	// (GET /rpc/pow_puzzle)
	GetRpcPowPuzzle(ctx context.Context, request GetRpcPowPuzzleRequestObject) (GetRpcPowPuzzleResponseObject, error)
	// search
	// (GET /search)
	GetSearch(ctx context.Context, request GetSearchRequestObject) (GetSearchResponseObject, error)
	// swagger.json
	// (GET /swagger.json)
	GetSwaggerJson(ctx context.Context, request GetSwaggerJsonRequestObject) (GetSwaggerJsonResponseObject, error)
	// transactionsByheight
	// (GET /transaction/by_height/{height})
	GetTransactionByHeightHeight(ctx context.Context, request GetTransactionByHeightHeightRequestObject) (GetTransactionByHeightHeightResponseObject, error)
	// NetworkFeeRewardTrend
	// (GET /trend/fee)
	GetTrendFee(ctx context.Context, request GetTrendFeeRequestObject) (GetTrendFeeResponseObject, error)
	// NetworkRewardTrend
	// (GET /trend/reward)
	GetTrendReward(ctx context.Context, request GetTrendRewardRequestObject) (GetTrendRewardResponseObject, error)
	// NetworkTargetTrend
	// (GET /trend/target)
	GetTrendTarget(ctx context.Context, request GetTrendTargetRequestObject) (GetTrendTargetResponseObject, error)
	// transactions
	// (GET /tx/list)
	GetTxList(ctx context.Context, request GetTxListRequestObject) (GetTxListResponseObject, error)
	// getTransaction
	// (GET /tx/{txid})
	GetTxTxid(ctx context.Context, request GetTxTxidRequestObject) (GetTxTxidResponseObject, error)
	// utxolist
	// (GET /utxo/list)
	GetUtxoList(ctx context.Context, request GetUtxoListRequestObject) (GetUtxoListResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetBlockEvent operation middleware
func (sh *strictHandler) GetBlockEvent(ctx *gin.Context) {
	var request GetBlockEventRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlockEvent(ctx, request.(GetBlockEventRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlockEvent")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBlockEventResponseObject); ok {
		if err := validResponse.VisitGetBlockEventResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBlockMempool operation middleware
func (sh *strictHandler) GetBlockMempool(ctx *gin.Context) {
	var request GetBlockMempoolRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlockMempool(ctx, request.(GetBlockMempoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlockMempool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBlockMempoolResponseObject); ok {
		if err := validResponse.VisitGetBlockMempoolResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBlockHeight operation middleware
func (sh *strictHandler) GetBlockHeight(ctx *gin.Context, height int64) {
	var request GetBlockHeightRequestObject

	request.Height = height

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlockHeight(ctx, request.(GetBlockHeightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlockHeight")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBlockHeightResponseObject); ok {
		if err := validResponse.VisitGetBlockHeightResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetBlocks operation middleware
func (sh *strictHandler) GetBlocks(ctx *gin.Context, params GetBlocksParams) {
	var request GetBlocksRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBlocks(ctx, request.(GetBlocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBlocks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBlocksResponseObject); ok {
		if err := validResponse.VisitGetBlocksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetForks operation middleware
func (sh *strictHandler) GetForks(ctx *gin.Context, params GetForksParams) {
	var request GetForksRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetForks(ctx, request.(GetForksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetForks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetForksResponseObject); ok {
		if err := validResponse.VisitGetForksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetOverview operation middleware
func (sh *strictHandler) GetOverview(ctx *gin.Context) {
	var request GetOverviewRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOverview(ctx, request.(GetOverviewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOverview")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetOverviewResponseObject); ok {
		if err := validResponse.VisitGetOverviewResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRpcBlockHeightOrHash operation middleware
func (sh *strictHandler) GetRpcBlockHeightOrHash(ctx *gin.Context, heightOrHash string) {
	var request GetRpcBlockHeightOrHashRequestObject

	request.HeightOrHash = heightOrHash

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRpcBlockHeightOrHash(ctx, request.(GetRpcBlockHeightOrHashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRpcBlockHeightOrHash")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRpcBlockHeightOrHashResponseObject); ok {
		if err := validResponse.VisitGetRpcBlockHeightOrHashResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRpcPowPuzzle operation middleware
func (sh *strictHandler) GetRpcPowPuzzle(ctx *gin.Context) {
	var request GetRpcPowPuzzleRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRpcPowPuzzle(ctx, request.(GetRpcPowPuzzleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRpcPowPuzzle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetRpcPowPuzzleResponseObject); ok {
		if err := validResponse.VisitGetRpcPowPuzzleResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSearch operation middleware
func (sh *strictHandler) GetSearch(ctx *gin.Context, params GetSearchParams) {
	var request GetSearchRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSearch(ctx, request.(GetSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSearchResponseObject); ok {
		if err := validResponse.VisitGetSearchResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSwaggerJson operation middleware
func (sh *strictHandler) GetSwaggerJson(ctx *gin.Context) {
	var request GetSwaggerJsonRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSwaggerJson(ctx, request.(GetSwaggerJsonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSwaggerJson")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSwaggerJsonResponseObject); ok {
		if err := validResponse.VisitGetSwaggerJsonResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTransactionByHeightHeight operation middleware
func (sh *strictHandler) GetTransactionByHeightHeight(ctx *gin.Context, height int64) {
	var request GetTransactionByHeightHeightRequestObject

	request.Height = height

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionByHeightHeight(ctx, request.(GetTransactionByHeightHeightRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionByHeightHeight")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTransactionByHeightHeightResponseObject); ok {
		if err := validResponse.VisitGetTransactionByHeightHeightResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrendFee operation middleware
func (sh *strictHandler) GetTrendFee(ctx *gin.Context, params GetTrendFeeParams) {
	var request GetTrendFeeRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrendFee(ctx, request.(GetTrendFeeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrendFee")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTrendFeeResponseObject); ok {
		if err := validResponse.VisitGetTrendFeeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrendReward operation middleware
func (sh *strictHandler) GetTrendReward(ctx *gin.Context, params GetTrendRewardParams) {
	var request GetTrendRewardRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrendReward(ctx, request.(GetTrendRewardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrendReward")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTrendRewardResponseObject); ok {
		if err := validResponse.VisitGetTrendRewardResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTrendTarget operation middleware
func (sh *strictHandler) GetTrendTarget(ctx *gin.Context, params GetTrendTargetParams) {
	var request GetTrendTargetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTrendTarget(ctx, request.(GetTrendTargetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTrendTarget")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTrendTargetResponseObject); ok {
		if err := validResponse.VisitGetTrendTargetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTxList operation middleware
func (sh *strictHandler) GetTxList(ctx *gin.Context, params GetTxListParams) {
	var request GetTxListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTxList(ctx, request.(GetTxListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTxList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTxListResponseObject); ok {
		if err := validResponse.VisitGetTxListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTxTxid operation middleware
func (sh *strictHandler) GetTxTxid(ctx *gin.Context, txid string) {
	var request GetTxTxidRequestObject

	request.Txid = txid

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTxTxid(ctx, request.(GetTxTxidRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTxTxid")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTxTxidResponseObject); ok {
		if err := validResponse.VisitGetTxTxidResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUtxoList operation middleware
func (sh *strictHandler) GetUtxoList(ctx *gin.Context, params GetUtxoListParams) {
	var request GetUtxoListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUtxoList(ctx, request.(GetUtxoListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUtxoList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUtxoListResponseObject); ok {
		if err := validResponse.VisitGetUtxoListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
